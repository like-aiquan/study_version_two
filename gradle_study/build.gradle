import org.apache.commons.lang3.StringUtils

// 初始化即执行
println "hello world"

// -- 执行 gradlew help   -- help任务是gradle默认的一个任务
// 执行到configure阶段从到到尾把这个执行脚本执行一遍 且设置任务名为helloworld
task("helloworld", {
    // configure阶段一行一行执行这个脚本，首行打印一定会执行，打印出内容。
    println("configure hello world run ... ")
    // doLast方法的作用是把这个动作放到这个任务的执行列表的最后，但我并不真正的执行这个动作，只有真正执行这个任务才会出发这个动作  真正执行任务  gradlew helloworld
    doLast {
        println("hello world executor project task")
    }
})

// 改造上述脚本
task("xxx") {
    println "configure xxx run ... "
    doLast {
        println "xxx executor project task"
        // 指明依赖于 helloworld任务
        dependsOn('helloworld')
    }
}

// 钩子函数 在一个project的生命周期的configure执行完毕后才会执行这个方法  方法存在于project类中
afterEvaluate {
    println("evaluate out ...")
}


// buildScript方法必须在所有的插件apply之前定义
// 在build.gradle中使用第三方的以来仓库需要配置在buildScript中   buildScript同时用来指定自定义的插件信息
buildscript {
    // 和java程序相同的配置方式
    // 依赖仓库
    repositories {
        // 默认是maven2  可配置
        maven { url 'file:///D:/gradle/repo' }
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        maven { url "https://maven.repository.redhat.com/ga/" }
        maven { url "https://maven.nuiton.org/nexus/content/groups/releases/" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        // 默认
        mavenCentral()
    }
    // 依赖坐标  gradle版本
    dependencies {
        // 此处和java程序依赖不同， 此处需要的是构建一个classpath
        classpath 'org.apache.commons:commons-lang3:3.12.0'
        // 在此处引入自定义的插件信息  私服仓库的插件坐标
        // classpath group: '', name: '', version: ''
    }
}

// 使用buildScript引入的第三方插件
if (StringUtils.isEmpty("")) {
    // do something
}


// gradle插件机制  Plugin<T>  泛型可以为任何类型  但是在项目中绝大多数情况都是project
class MyPluginDemo implements Plugin<Project> {
    // 实现执行插件的方法
    @Override
    void apply(Project project) {
        // 抽取出的公共行为
        project.task('all') {
            println "configure all run ... "
            doLast {
                println "all executor project task"
                // 指明依赖于 xxx 任务
                dependsOn('xxx')
            }
        }
    }
}

// 获取到定义的插件实例化这个插件的类 代理这个类的apply方法并执行
//apply([plugin: MyPluginDemo])
// 去语法糖化
apply plugin: MyPluginDemo
// 指定插件
apply plugin: 'java'
// 指定插件 从本地的buildSrc中获取插件信息  本质上还是加载buildSrc项目编译完成的jar包到buildScript的classpath中
apply plugin: MyPluginBuildSrcDemo

// build.gradle中添加java程序需要的依赖只需要在project下配置如下：
// 本地坐标
group 'like.aiquan'
version '1.0-SNAPSHOT'
// jdk version
sourceCompatibility = 11
// 依赖仓库
repositories {
    // 默认是maven2  可配置
    mavenLocal()
    maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
    maven { url 'https://repo.spring.io/libs-snapshot' }
    maven { url "https://maven.repository.redhat.com/ga/" }
    maven { url "https://maven.nuiton.org/nexus/content/groups/releases/" }
    maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    // 默认
    mavenCentral()
}
// 依赖坐标  gradle版本
dependencies {
    compile 'org.apache.commons:commons-lang3:3.12.0'
}


/* gradle 生命周器
    初始化： 决定哪些项目参与构建并为每个项目创建project实例
    配置： 在此阶段中，将配置project实例。作为构建的一部分的所有项目的构建脚本都会被执行。
    执行： Gradle决定了在配置阶段创建和配置的任务的子集。这个子集由传递给gradle命令的任务名参数和当前目录决定。然后Gradle会执行每一个选中的任务。
 */